  <%= javascript_include_tag  'https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js' %>

  <div id="application-holder"></div>

  <script>
    RA = {};
    RA.user_id = <%= session[:user_id]%>;
    RA.current_user = <%= "#{@user.to_json}".html_safe %>;
  </script>

  <script type="text/babel">
    $(document).ready(function(){
        
        var Button = ReactBootstrap.Button;
        var Modal = ReactBootstrap.Modal;

        var Loader = React.createClass({
          render: function(){
            return (
              <div className="loader">
                <img className="switch-icon loader-icon spinning-cog" src="http://pasqualevitiello.github.io/Tumblr-Style-Cog-Spinners/cogs/cog23.svg" />
              </div>
            );
          }
        });

        // a module that is in charge of updating messages and displaying load state
        var UpdateMessagesBox = React.createClass({
          updateMessages: function(){
            $.ajax({
              url: '/user/sync_messages?user_id='+RA.user_id,
              dataType: 'json',
              cache: false,
              success: function(data) {
                console.log('messages successfully updated!');
                window.clearInterval(this.progressInterval);
                this.setState({'messages_loaded': undefined});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
            this.setState({'messages_loaded': 0});

            this.progressCounter = 0;
            this.initialMessageCount = 0;

            this.progressInterval = window.setInterval(function(){
              $.ajax({
                url: '/user/message_count?user_id='+RA.user_id,
                dataType: 'json',
                cache: false,
                success: function(data) {

                  if(this.progressCounter === 0){
                    this.initialMessageCount = data.message_count;
                  }

                  this.setState({
                    'messages_loaded': data.message_count - this.initialMessageCount
                  });

                  this.progressCounter++;
                }.bind(this)
              });
            }.bind(this), 2000);
          },
          getInitialState: function() {
            return {data: []};
          },
          render: function() {

            var progressHolderStyle = {'display': (!_.isUndefined(this.state.messages_loaded))? 'block' : 'none'}
            var buttonStyle = {'display': (!_.isUndefined(this.state.messages_loaded))? 'none' : 'block'}
            var progressStyle = {
              width: (((this.progressCounter * 2) < 100) ? this.progressCounter * 2 : '100') + '%',
            };

            return (
              <div className="update-message-box">
                <button className="btn btn-primary" onClick={this.updateMessages} style={buttonStyle}>Update Messages</button>
                <div className="progress" style={progressHolderStyle}>
                  <div className="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{progress}" aria-valuemin="0" aria-valuemax="100" style={progressStyle}>
                    {this.state.messages_loaded} messages loaded
                  </div>
                </div>
              </div>
            );
          }
        });

        var EditableUserTable = React.createClass({

          handleRowUpdated : function(row, cellName, cellValue){
            var data = {};

            if(cellName === 'color'){
              cellValue = parseInt(cellValue.split('-')[0],10)
            }

            data[cellName] = cellValue;
            $.ajax({
                type: "PUT",
                url: '/user/'+row.id,
                data: data
            });

            window.setTimeout(function(){
              toastr.info('User data saved!');
            },350);
          },

          render:function(){
            var cellEditProp = {
              mode: "click",
              blurToSave: true,
              afterSaveCell: this.handleRowUpdated
            };

            this.colorSettings = {
              type: 'select',
              options:{
                values: [
                  '0 - dark blue',
                  '1 - light blue',
                  '2 - dark orange',
                  '3 - light orange',
                  '4 - dark green',
                  '5 - light green',
                  '6 - ketchup',
                  '7 - ketchup+mayo',
                  '8 - aurora',
                  '9 - dawn',
                  '10 - mahogany',
                  '11 - skin',
                  '12 - barbie pink',
                  '13 - 80s barbie pink',
                  '14 - charcoal',
                  '15 - meteorite',
                  '16 - barf',
                  '17 - light barf',
                  '18 - aqua',
                  '19 - baby aqua'
                ]
              }
            };

            var avatarComponent = function(cell){ return '<img class="editable-user-table-avatar" src="'+cell+'" />'; };

            return(
            <BootstrapTable data={this.props.rows} cellEdit={cellEditProp}>
              <TableHeaderColumn dataField="id" isKey={true}>ID</TableHeaderColumn>
              <TableHeaderColumn dataField="avatar" editable={false} dataFormat={avatarComponent} >Avatar</TableHeaderColumn>
              <TableHeaderColumn dataField="name" editable={false}>Name</TableHeaderColumn>
              <TableHeaderColumn dataField="email" editable={false}>email</TableHeaderColumn>
              <TableHeaderColumn dataField="color" editable={this.colorSettings} width={'150'}>color</TableHeaderColumn>
            </BootstrapTable>
            )


          }

        });

        var ManageUsersModal = React.createClass({

          getInitialState() {
            return { showModal: false };
          },

          close() {
            this.setState({ showModal: false });
          },

          open() {
            this.setState({ showModal: true });
          },

          loadUsers: function(){
            $.ajax({
              url: '/user',
              dataType: 'json',
              cache: false,
              success: function(data) {
                this.setState({rows: data});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
          },

          componentDidMount: function() {
            this.loadUsers();
          },

          render() {
            return (
              <div>

                <Button
                  bsStyle="default"
                  onClick={this.open}
                  className="manage-users-button"
                >
                  Manage Users
                </Button>

                <Modal show={this.state.showModal} onHide={this.close}>
                  <Modal.Header closeButton>
                    <Modal.Title>Manage Users</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>
                    <h4>User Details</h4>
                    <EditableUserTable rows={this.state.rows} />
                  </Modal.Body>
                  <Modal.Footer>
                    <Button onClick={this.close}>Close</Button>
                  </Modal.Footer>
                </Modal>
              </div>
            );
          }
        });

        var TeammateItem = React.createClass({
          render: function(){
            return(
              <div className="teammate-item">
                <img className="teammate-item-avatar" src={this.props.data.user.avatar} />
                <div className="teammate-item-name">{this.props.data.user.name}</div>
                <div className="teammate-item-count">{this.props.data.count}</div>
              </div>
            );
          }
        });

        var UserDetailsPanel = React.createClass({
          getInitialState: function() {
            return {data: []};
          },
          render: function(){

            var view = <Loader />;
            if(this.props.data.user){
              var teammateNodes = this.props.data.top_teammates.map(function(teammate){
                return(
                  <TeammateItem data={teammate} key={teammate.user.id} />
                );
              });

              var view = <div className="user-details-panel">
                            <div className="user-details-panel-top clearfix">
                              <img className="user-details-panel-avatar" src={this.props.data.user.avatar} />
                              <div className="user-details-panel-top-text">
                                <h2>{this.props.data.user.name}</h2>
                                <h4>{this.props.data.user.email}</h4>
                                <h4>Messages Received: {this.props.data.total_to}</h4>
                                <h4>Messages Sent: {this.props.data.total_from}</h4>
                              </div>
                            </div>
                            <h3>Direct Messages</h3>
                            <div>
                              { teammateNodes }
                            </div>
                         </div>
            }
                      

            return (
              <div>
                { view }
              </div>
            );
          }
        });

        var InfoPanelBox = React.createClass({
          loadUserDetails: function(user_id) {
            $.ajax({
              url: '/user/details?user_id='+user_id,
              dataType: 'json',
              cache: false,
              success: function(data) {
                this.setState({data: data});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
          },
          getInitialState: function() {
            return {data: []};
          },
          componentDidMount: function() {
            this.loadUserDetails(RA.user_id);
            $(RA).bind('show-user-details', function(e,details){
              this.loadUserDetails(details.id);
            }.bind(this));
          },
          render: function() {
            return (
              <div className="infoPanelBox">
                <UserDetailsPanel data={this.state.data} />
              </div>
            );
          }
        });


        var d3Chart = {};

        d3Chart.create = function(el, props, state) {
          this.update(el, props, state);
        };

        d3Chart.update = function(el, props, state) {
          console.log(el,props,state);
          var width = props.width,
              height = props.height,
              data_links = _.filter(props.data.links, function(link){return link.value > 5});

          var color = d3.scale.category20();

          var force = d3.layout.force()
              .charge(-120)
              .linkDistance(100)
              .size([width, height]);

          var svg = d3.select(el).append("svg")
              .attr("width", width)
              .attr("height", height);

          force
              .nodes(props.data.nodes)
              .links(data_links)
              .start();

          var link_max_value = _.max(data_links, function(link){ return link.value }).value;
          var link_stroke_max = 10;

          var link = svg.selectAll(".link")
              .data(data_links)
            .enter().append("line")
              .attr("class", "link")
              .style("stroke-width", function(d) { return (d.value/link_max_value)*link_stroke_max; });

          var node = svg.selectAll(".node")
              .data(props.data.nodes)
            .enter().append("g")
              .attr("class", "node")              
              .call(force.drag);

          node.append("circle")
            .attr("r", 10)
            .style("fill", function(d) { return color(d.color); })

          node.append("text")
            .attr("dx", 12)
            .attr("dy", 12)
            .attr("class", "node-text")
            .text(function(d) { return d.name });

          node.append("title")
            .text(function(d) { return d.name; });

          node.on("mouseover",function(){ $(this).find('circle').attr("r","15") });
          node.on("mouseout",function(){
            var circle = $(this).find('circle');
            if( !/active/.test(circle.attr('class')) ){
              circle.attr("r","10");
            } 
          });
          node.on("click",function(d){
            d3.selectAll('circle').attr('class', 'node').attr("r","10");
            $(this).find('circle').attr('class', 'node active').attr('r','15');

            $(RA).trigger('show-user-details', [d]);
          });

          force.on("tick", function() {
            link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
          });
        };

        d3Chart.destroy = function(el) {
          // Any clean-up would go here
          // in this example there is nothing to do
        };

        var GraphView = React.createClass({
          propTypes: {
            data: React.PropTypes.object
          },

          componentDidMount: function() {
            var el = ReactDOM.findDOMNode(this);
            d3Chart.create(el, this.props, this.state)
          },

          componentDidUpdate: function() {
            var el = ReactDOM.findDOMNode(this);
            d3Chart.update(el, this.props, this.state);
          },

          componentWillUnmount: function() {
            var el = ReactDOM.findDOMNode(this);
            d3Chart.destroy(el);
          },

          render: function() {
            return (
              <div className="GraphView"></div>
            );
          }
        });

        var GraphViewHolder = React.createClass({
          propTypes: {
            data: React.PropTypes.object
          },

          loadGraph: function(){
            $.ajax({
              url: this.props.url+'?team_id='+RA.current_user.team_id,
              dataType: 'json',
              cache: false,
              success: function(data) {
                this.setState({data: data});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
          },

          componentDidMount: function() {
            this.loadGraph();
            this.height = $(ReactDOM.findDOMNode(this)).height();
            this.width = $(ReactDOM.findDOMNode(this)).width();
          },

          render: function() {
            return (
              <div className="GraphViewHolder">
              { (this.state && this.state.data)
                ? <GraphView data={this.state.data} height={this.height} width={this.width} />
                : <Loader />
              }
              </div>
            );
          }
        });

        var App = React.createClass({
          render: function() {
            return (
              <div className="container-fluid">
                  <div className="row row-main">
                      <div className="col-md-8" id="graph-container">
                          <GraphViewHolder url="/graph" />
                      </div>
                      <div className="col-md-4" id="info-container">
                          <InfoPanelBox url="/user/message_count" />
                      </div>
                  </div>
                  <UpdateMessagesBox />
                  <ManageUsersModal />
              </div>
            );
          }
        });

        ReactDOM.render(<App />, $('#application-holder')[0]);


    });
  </script>